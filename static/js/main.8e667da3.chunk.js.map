{"version":3,"sources":["components/Score/Score.js","components/Image/Image.js","App.js","index.js"],"names":["Score","props","className","id","score","message","Image","alt","name","src","url","onClick","imageClick","App","state","images","clickedImages","shuffledImages","shuffleImages","setState","includes","concat","i","length","j","Math","floor","random","this","map","image","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+kCAmBeA,G,YAhBD,SAACC,GAAD,OACV,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,wBAAwBC,GAAG,SACtC,0CACA,2BAAIF,EAAMG,SAGlB,yBAAKF,UAAU,OACX,yBAAKA,UAAU,yBACX,2BAAID,EAAMI,cCAXC,G,MAVD,SAACL,GAAD,OACV,6BACI,yBAAKC,UAAU,0BACfK,IAAKN,EAAMO,KACXC,IAAKR,EAAMS,IACXC,QAAS,kBAAMV,EAAMW,WAAWX,EAAME,U,OC+E/BU,E,2MAhFbC,MAAQ,CACNC,SACAC,cAAe,GACfZ,MAAO,EACPC,QAAS,I,EAIXO,WAAa,SAACT,GAEZ,IAAMc,EAAiB,EAAKC,cAAcH,GAC1C,EAAKI,SAAS,CAAEJ,OAAQE,IAGpB,EAAKH,MAAME,cAAcI,SAASjB,GACpC,EAAKgB,SAAS,CACZf,MAAO,EACPY,cAAe,GACfX,QAAS,mDAIJ,EAAKS,MAAMV,MAAQ,GAC1B,EAAKe,SAAS,CACZH,cAAe,EAAKF,MAAME,cAAcK,OAAOlB,GAC/CC,MAAO,EAAKU,MAAMV,MAAQ,EAC1BC,QAAS,2BAKX,EAAKc,SAAS,CACZH,cAAe,GACfZ,MAAO,EACPC,QAAS,wB,EAMfa,cAAgB,SAACH,GACf,IAAK,IAAIO,EAAIP,EAAOQ,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC1C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADE,EAEjB,CAACP,EAAOS,GAAIT,EAAOO,IAA3CP,EAAOO,GAFkC,KAE9BP,EAAOS,GAFuB,KAI5C,OAAOT,G,wEAGC,IAAD,OACP,OACE,6BACE,yBAAKb,UAAU,kCACb,2CACA,4HACA,kBAAC,EAAD,CACAE,MAAOwB,KAAKd,MAAMV,MAClBC,QAASuB,KAAKd,MAAMT,WAItB,yBAAKH,UAAU,aACb,yBAAKA,UAAU,0BAA0BC,GAAG,kBACzCyB,KAAKd,MAAMC,OAAOc,KAAI,SAAAC,GAAK,OAC1B,yBAAK5B,UAAU,iBACb,kBAAC,EAAD,CACEC,GAAI2B,EAAM3B,GACV4B,IAAKD,EAAM3B,GACXK,KAAMsB,EAAMtB,KACZE,IAAKoB,EAAMpB,IACXE,WAAY,EAAKA,wB,GAtEjBoB,IAAMC,WCFxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.8e667da3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Score.css';\r\n\r\nconst Score = (props) => (\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            <div className=\"col-sm-3 mx-auto mt-3\" id=\"score\">\r\n                <h6>YOUR SCORE</h6>\r\n                <p>{props.score}</p>\r\n            </div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div className=\"col-sm-8 mx-auto mt-2\">\r\n                <p>{props.message}</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Score;","import React from 'react';\r\nimport './Image.css';\r\n\r\nconst Image = (props) => (\r\n    <div>\r\n        <img className=\"img-fluid img-thumbnail\"\r\n        alt={props.name}\r\n        src={props.url}\r\n        onClick={() => props.imageClick(props.id)}\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default Image;","import React from 'react';\nimport './App.css';\nimport Score from './components/Score/Score';\nimport Image from './components/Image/Image'\nimport images from './images.json';\n\nclass App extends React.Component {\n  state = {\n    images,\n    clickedImages: [],\n    score: 0,\n    message: \"\"\n  };\n\n  // Method to handle image clicks\n  imageClick = (id) => {\n    // Create new array with rearranged images\n    const shuffledImages = this.shuffleImages(images);\n    this.setState({ images: shuffledImages });\n\n    // If the image has been clicked, reset the game\n    if (this.state.clickedImages.includes(id)) {\n      this.setState({\n        score: 0,\n        clickedImages: [],\n        message: \"Oops! You already clicked that one! Try again.\"\n      });\n    }\n    // If the image hasn't been clicked, add it to clicked array & increment the score\n    else if (this.state.score < 11) {\n      this.setState({\n        clickedImages: this.state.clickedImages.concat(id),\n        score: this.state.score + 1,\n        message: \"Good work! Keep going!\"\n      })\n    }\n    else {\n      // Once all correct images have been clicked, declare a win and reset the game\n      this.setState({\n        clickedImages: [],\n        score: 0,\n        message: \"Congrats, you win!\"\n      })\n    }\n  };\n\n  // Randomly changes the image indexes so they become rearranged\n  shuffleImages = (images) => {\n    for (let i = images.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [images[i], images[j]] = [images[j], images[i]];\n    }\n    return images;\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"jumbotron text-center mb-5 p-1\">\n          <h1>Memory Game</h1>\n          <h5>Click the pictures as they randomly rearrange! Don't click on any picture twice or you lose!</h5>\n          <Score \n          score={this.state.score}\n          message={this.state.message}\n          />\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row text-center mx-auto\" id=\"pics-container\">\n            {this.state.images.map(image => (\n              <div className=\"col-sm-3 mb-4\">\n                <Image\n                  id={image.id}\n                  key={image.id}\n                  name={image.name}\n                  url={image.url}\n                  imageClick={this.imageClick}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}